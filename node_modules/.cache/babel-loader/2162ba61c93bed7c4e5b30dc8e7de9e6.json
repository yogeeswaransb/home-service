{"ast":null,"code":"var _jsxFileName = \"/Users/yogeeb/Downloads/Home-Services/HomeServices-Frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if user is already logged in (e.g., from sessionStorage)\n    const userEmail = sessionStorage.getItem('userEmail');\n    const userId = sessionStorage.getItem('userId');\n\n    if (userEmail && userId) {\n      setUser({\n        email: userEmail,\n        id: userId\n      });\n    }\n  }, []);\n\n  const login = (email, password) => {\n    if (email === 'admin@gmail.com' && password === 'admin') {\n      toast.success('Logged in as Admin');\n      setUser({\n        email,\n        role: 'admin'\n      });\n      sessionStorage.setItem('userEmail', email);\n      navigate('/Admin');\n    } else {\n      // Handle user login via API\n      const url = `http://localhost:7071/user/signin`;\n      const params = {\n        email,\n        password\n      };\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      axios.get(url, {\n        params\n      }, config).then(response => {\n        const result = response.data;\n\n        if (result.status === undefined) {\n          setUser({\n            email,\n            id: result.userId\n          });\n          sessionStorage.setItem('userEmail', email);\n          sessionStorage.setItem('userId', result.userId);\n          toast.success('Logged in successfully');\n          navigate('/Services');\n        } else {\n          toast.error(result.error);\n        }\n      }).catch(() => {\n        toast.error('Login failed');\n      });\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    sessionStorage.clear();\n    toast.success('Logged out successfully');\n    navigate('/');\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"/48TlfV0adSMEvsbW2gk5sMeopI=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/yogeeb/Downloads/Home-Services/HomeServices-Frontend/src/context/AuthContext.js"],"names":["React","createContext","useState","useEffect","useNavigate","toast","axios","AuthContext","AuthProvider","children","user","setUser","navigate","userEmail","sessionStorage","getItem","userId","email","id","login","password","success","role","setItem","url","params","config","headers","get","then","response","result","data","status","undefined","error","catch","logout","clear"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (e.g., from sessionStorage)\r\n    const userEmail = sessionStorage.getItem('userEmail');\r\n    const userId = sessionStorage.getItem('userId');\r\n    if (userEmail && userId) {\r\n      setUser({ email: userEmail, id: userId });\r\n    }\r\n  }, []);\r\n\r\n  const login = (email, password) => {\r\n    if (email === 'admin@gmail.com' && password === 'admin') {\r\n      toast.success('Logged in as Admin');\r\n      setUser({ email, role: 'admin' });\r\n      sessionStorage.setItem('userEmail', email);\r\n      navigate('/Admin');\r\n    } else {\r\n      // Handle user login via API\r\n      const url = `http://localhost:7071/user/signin`;\r\n      const params = { email, password };\r\n      const config = { headers: { 'Content-Type': 'application/json' } };\r\n\r\n      axios\r\n        .get(url, { params }, config)\r\n        .then((response) => {\r\n          const result = response.data;\r\n          if (result.status === undefined) {\r\n            setUser({ email, id: result.userId });\r\n            sessionStorage.setItem('userEmail', email);\r\n            sessionStorage.setItem('userId', result.userId);\r\n            toast.success('Logged in successfully');\r\n            navigate('/Services');\r\n          } else {\r\n            toast.error(result.error);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          toast.error('Login failed');\r\n        });\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    sessionStorage.clear();\r\n    toast.success('Logged out successfully');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}